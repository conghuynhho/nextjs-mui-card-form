"use strict";
const parseISO = require('date-fns/parseISO');
const getTime = require('date-fns/getTime');
const format = require('date-fns/format');
const incrementMonths = require('date-fns/addMonths');
const incrementDays = require('date-fns/addDays');
/**
 * Convert given date | string | number to unix timestamp
 *
 * @param time
 * @return number
 */
function toUnix(time) {
    if (!time || time == '0000-00-00 00:00:00') {
        return 0;
    }
    return Math.round(getTime(parseISO(time)) / 1000);
}
/**
 * Get sql date as string
 * Return date as string with formatString default yyyy-MM-dd HH:mm:ss
 *
 * @param time
 * @param formatString
 */
function sqlDate(time = new Date(), formatString = "yyyy-MM-dd HH:mm:ss") {
    return format(time, formatString);
}
/**
 * Get utc date as string
 * Return date as string with format yyyy-MM-dd'T'HH:mm:ss.SSSxxx
 *
 * @param time
 */
function utcDate(time = new Date()) {
    return format(time, "yyyy-MM-dd'T'HH:mm:ss.SSSxxx");
}
/**
 * japan format date
 * Return date as string with format yyyy&#24180;MM&#26376;dd&#26085; (japanese)
 *
 * @param time
 */
function jDate(time) {
    if (time === 0) {
        time = Date.now();
    }
    return format(time, "yyyy&#24180;MM&#26376;dd&#26085;");
}
/**
 * Add given month(s) into given time (default time is now)
 *
 * @param {number} amount
 * @param {number} time
 * @param {Boolean} toUnixTime
 * @returns {string|number}
 */
function addMonths(amount, time = new Date(), toUnixTime = false) {
    const result = incrementMonths(time, amount);
    return toUnixTime ? toUnix(result) : result;
}
/**
 * Add given day(s) into given time (default time is now)
 *
 * @param {number} amount
 * @param {number} time
 * @param {Boolean} toUnixTime
 * @returns {string|number}
 */
function addDays(amount, time = new Date(), toUnixTime = false) {
    const result = incrementDays(time, amount);
    return toUnixTime ? toUnix(result) : result;
}
/**
 * Delay with promise
 * @param {Number} seconds
 */
function delay(seconds) {
    return new Promise(resolve => {
        setTimeout(resolve.bind(null), seconds);
    });
}
module.exports = {
    toUnix,
    sqlDate,
    utcDate,
    jDate,
    format,
    addMonths,
    addDays,
    delay,
};
