"use strict";
const webhook_1 = require("@slack/webhook");
const date_fns_1 = require("date-fns");
/**
 * Map channel name with config webhook env
 */
const channelWebhookMap = {
    "gg-vn": "T8WCY8AD7/B012B8E2BQD/IavpDkObBSSBRgUDEuMSSkSL",
    "error-test": "T8WCY8AD7/BFRF7E1QB/aC8V51MuL1myAnbKqpuMnUmW",
    "dev-environment": "T8WCY8AD7/BQ5BDCLGL/YzfArvrRqFU43QvvgHvkWrHo",
    "production-log": "T8WCY8AD7/BFSV3GUUS/KdT7fHefmH8p9Frjx9kYZaWH",
    "git-logs": "T8WCY8AD7/BN56MKNGY/999vaYt4LNWxK5dV55dHHocb",
    "realtrade-logs": "T8WCY8AD7/B0101TZG8TA/8PU7GCcg1cGzKqTkdMsONOCF",
    "maildeliver-report": "T8WCY8AD7/B011YAXG09G/bhGyiDfolfU6TvMlHLOmrQyr",
    "production-batch-log": "T8WCY8AD7/B01C6NCDMU6/zRWr5W8vBrPldsqs46lAitRB"
};
const ACCEPT_ENV = ['production', 'staging'];
/**
 * @params {preContent: optional, message: required} description
 * @params {string} webHookUrl - Slack web hook url
 * @params {boolean} isBlockEl - Set it true if message is block element
 */
async function send(description, webHookUrl = '', isBlockEl = false) {
    const hookString = webHookUrl || process.env.DEFAULT_SLACK_WEBHOOK || '';
    const serviceName = process.env.npm_package_name;
    const env = process.env.ENV;
    const jpTime = date_fns_1.format(new Date(new Date().toLocaleString("en-US", { timeZone: "Asia/Tokyo" })), 'yyyy-MM-dd HH:mm:ss');
    const vnTime = date_fns_1.format(new Date(new Date().toLocaleString("en-US", { timeZone: "Asia/Ho_Chi_Minh" })), 'yyyy-MM-dd HH:mm:ss');
    if (!description) {
        throw new Error('Description is invalid.');
    }
    const webHook = new webhook_1.IncomingWebhook(hookString);
    let content = '', preContent = '';
    if (description.preContent) {
        const data = description.preContent;
        if (typeof data === 'string') {
            // remove space (Regex: match at least 2 space/line-break or more)
            preContent = data.replace(/(?:\s{2,})/g, '\n');
        }
        else if (typeof data === 'object') {
            Object.getOwnPropertyNames(data).map((el, idx) => {
                preContent += `*${el}*: \`${data[el]}\`\n`;
            });
        }
    }
    if (description.message) {
        const data = description.message;
        if (typeof data === 'string') {
            content = data.replace(/(?:\s{2,})/g, '\n');
        }
        else if (typeof data === 'object') {
            content = JSON.stringify(data, Object.getOwnPropertyNames(data));
        }
    }
    const title = {
        "type": 'section',
        "text": { "type": 'mrkdwn', "text": `*Service: ${serviceName}*\n*Env: ${env}*\n*JP Time: ${jpTime}*\t*VN Time: ${vnTime}*\n` }
    };
    const divider = {
        "type": 'divider',
    };
    const preContentBlock = preContent && {
        "type": 'section',
        "text": { "type": 'mrkdwn', "text": `${preContent || ''}` }
    };
    const contentBlock = isBlockEl ? description.message : content && [{
            "type": 'section',
            "text": { "type": 'mrkdwn', "text": `\`\`\`${content}\`\`\`` }
        }];
    const attachmentData = [{ blocks: [preContentBlock] }, { blocks: contentBlock || [] }].filter(e => e.blocks[0]);
    return webHook.send({
        text: `${serviceName}\tENV: ${env}`,
        blocks: [title, divider],
        attachments: attachmentData,
    });
}
/**
 * @params {string or object} preContent: optional, message: required
 * @params {string} channelName - Slack notifi channel name
 * @params {boolean} isBlockEl - Set it true if message is block element
 */
async function sendV2(preContent, message, channelName, isBlockEl = false) {
    const env = process.env.ENV;
    if (!ACCEPT_ENV.includes(env + '')) {
        console.log('Not send slack on env local');
        return;
    }
    const hookUrl = channelWebhookMap[channelName] || '';
    if (hookUrl) {
        const webHookUrl = 'https://hooks.slack.com/services/' + channelWebhookMap[channelName];
        const description = { preContent: preContent, message: message };
        await send(description, webHookUrl, isBlockEl);
    }
    else {
        console.log(`Error: Invalid slack channelName "${channelName}"`);
        return;
    }
}
module.exports = {
    send,
    sendV2,
};
