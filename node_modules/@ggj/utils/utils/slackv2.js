"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const date_fns_1 = require("date-fns");
const axios_1 = __importDefault(require("axios"));
/**
 * Map channel name with config webhook env
 */
const ACCEPT_ENV = ['production', 'staging'];
const API_HOOK_URL = 'http://hook.gogojungle.net/api/hook/slack';
const ACCESS_TOKEN = '8BAB#yfqKrX2v2%H%f!38RMLTX^GQWKRTjh';
/**
 * @params {preContent: optional, message: required} description
 * @params {string} webHookUrl - Slack web hook url
 * @params {boolean} isBlockEl - Set it true if message is block element
 */
async function send(description, channelName = '', isBlockEl = false) {
    const env = process.env.ENV;
    if (!ACCEPT_ENV.includes(env + '')) {
        return;
    }
    const serviceName = process.env.npm_package_name;
    const jpTime = date_fns_1.format(new Date(new Date().toLocaleString("en-US", { timeZone: "Asia/Tokyo" })), 'yyyy-MM-dd HH:mm:ss');
    const vnTime = date_fns_1.format(new Date(new Date().toLocaleString("en-US", { timeZone: "Asia/Ho_Chi_Minh" })), 'yyyy-MM-dd HH:mm:ss');
    if (!description) {
        throw new Error('Description is invalid.');
    }
    let content = '', preContent = '';
    if (description.preContent) {
        const data = description.preContent;
        if (typeof data === 'string') {
            // remove space (Regex: match at least 2 space/line-break or more)
            preContent = data.replace(/(?:\s{2,})/g, '\n');
        }
        else if (typeof data === 'object') {
            Object.getOwnPropertyNames(data).map((el, idx) => {
                preContent += `*${el}*: \`${data[el]}\`\n`;
            });
        }
    }
    if (description.message) {
        const data = description.message;
        if (typeof data === 'string') {
            content = data.replace(/(?:\s{2,})/g, '\n');
        }
        else if (typeof data === 'object') {
            content = JSON.stringify(data, Object.getOwnPropertyNames(data));
        }
    }
    const title = {
        "type": 'section',
        "text": { "type": 'mrkdwn', "text": `*Service: ${serviceName}*\n*Env: ${env}*\n*JP Time: ${jpTime}*\t*VN Time: ${vnTime}*\n` }
    };
    const divider = {
        "type": 'divider',
    };
    const preContentBlock = preContent && {
        "type": 'section',
        "text": { "type": 'mrkdwn', "text": `${preContent || ''}` }
    };
    const contentBlock = isBlockEl ? description.message : content && [{
            "type": 'section',
            "text": { "type": 'mrkdwn', "text": `\`\`\`${content}\`\`\`` }
        }];
    const attachmentData = [{ blocks: [preContentBlock] }, { blocks: contentBlock || [] }].filter(e => e.blocks[0]);
    return axios_1.default.post(API_HOOK_URL, {
        data: {
            text: `${serviceName}\tENV: ${env}`,
            blocks: [title, divider],
            attachments: attachmentData,
        },
        token: ACCESS_TOKEN,
        channelName,
    });
}
module.exports = {
    send,
};
