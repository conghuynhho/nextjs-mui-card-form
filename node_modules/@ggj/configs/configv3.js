const fs = require('fs')
const path = require('path')
const { safeLoadAll } = require('js-yaml')
const { AppConfig } = require('aws-sdk')
const COMMON_SERVICE = 'gogo.common'

async function getEFSConfig(serviceName, version, numberDeployment) {
  const dirName = path.join(`/mnt/configs/${serviceName}`)
  const fileName = `${dirName}/${version}.${numberDeployment}.yaml`
  if (!fs.existsSync(fileName)) {
    if (fs.existsSync(dirName) && serviceName !== COMMON_SERVICE) {
      const files = fs.readdirSync(dirName)
      for (const file of files) {
        try {
          fs.unlinkSync(`${dirName}/${file}`)
        } catch (e) {
          console.log(`Service ${serviceName}: File config ${file} not found!`)
        }
      }
    }
    return null
  }
  const config = fs.readFileSync(fileName, 'utf8')
  return config || null
}

async function listApplications() {
  const appConf = new AppConfig()
  const MaxResults = 50
  let Items = []
  let NextToken = ''

  while(true) {
    const listApp = await appConf.listApplications(
      NextToken ? {NextToken, MaxResults} : {MaxResults}
    ).promise()
    Items = [...Items, ...listApp.Items]

    if(!listApp.NextToken) break // if no next, break
    NextToken = listApp.NextToken
  }

  return {Items}
}

async function getSSMConfig(serviceName, env, version) {
  const appConf = new AppConfig()
  const getApplicationId = async (serviceName) => {
    const { Items } = await listApplications()
    for (const item of Items) {
      if (item.Name == serviceName) {
        return item.Id
      }
    }

    return null
  }

  const getConfigurationProfileId = async (applicationId, serviceName, env) => {
    const { Items } = await appConf
      .listConfigurationProfiles({
        ApplicationId: applicationId,
      })
      .promise()
    for (const item of Items) {
      if (item.Name == `${serviceName}.${env}`) {
        return item.Id
      }
    }

    return null
  }

  const getConfigVersion = async (
    applicationId,
    configurationProfileId,
    versionNumber,
  ) => {
    try {
      const config = await appConf
        .getHostedConfigurationVersion({
          ApplicationId: applicationId,
          ConfigurationProfileId: configurationProfileId,
          VersionNumber: versionNumber,
        })
        .promise()

      return config.Content.toString() || null
    } catch (err) {
      console.error(err)
      return null
    }
  }

  const applicationId = await getApplicationId(serviceName)
  if (!applicationId) {
    return null
  }
  const configurationProfileId = await getConfigurationProfileId(
    applicationId,
    serviceName,
    env,
  )
  if (!configurationProfileId) {
    return null
  }
  const config = await getConfigVersion(
    applicationId,
    configurationProfileId,
    version,
  )
  if (!config) {
    return null
  }
  return config
}

async function getServiceConfig(serviceName, env, version, numberDeployment) {
  const EFSConfig = await getEFSConfig(serviceName, version, numberDeployment)
  if (EFSConfig) {
    console.log(`Get env from efs version: ${version} and deployment: ${numberDeployment}`)
    return EFSConfig
  }
  const SSMConfig = await getSSMConfig(serviceName, env, version)
  if (!SSMConfig) {
    throw new Error(`No config found for service ${serviceName}`)
  }
  const dirName = path.join(`/mnt/configs/${serviceName}`)
  if (!fs.existsSync(dirName)) {
    fs.mkdirSync(dirName)
  }
  // save config to EFS
  fs.writeFileSync(`${dirName}/${version}.${numberDeployment}.yaml`, SSMConfig)
  console.log(`Get env from AWS config and create new file env efs version: ${version} and deployment: ${numberDeployment}`)
  return SSMConfig
}

async function getLocalConfig(
  serviceName,
  env,
  clientConfigurationVersion,
  commonConfigVersion,
  numberDeployment,
) {
  const numberDeploymentCf = {
    'SERVICE_NUMBER_DEPLOYMENT': numberDeployment.serviceNumberDeployment,
    'COMMON_NUMBER_DEPLOYMENT': numberDeployment.commonNumberDeployment
  }
  const serviceConfig = await getSSMConfig(serviceName, env, clientConfigurationVersion)
  if (!commonConfigVersion) {
    return {
      ...(safeLoadAll(serviceConfig)[0] || {}),
      ...numberDeploymentCf
    }
  }
  const commonConfig = await getSSMConfig(COMMON_SERVICE, env, commonConfigVersion)
  return {
    ...(safeLoadAll(commonConfig)[0] || {}),
    ...(safeLoadAll(serviceConfig)[0] || {}),
    ...numberDeploymentCf
  }
}

async function getConfigs(
  serviceName,
  env,
  serviceConfVersion,
  commonConfVersion = null,
  numberDeployment,
) {
  if (!serviceConfVersion) {
    throw new Error('Service config version not found!')
  }

  const serviceConfig = await getServiceConfig(
    serviceName,
    env,
    serviceConfVersion,
    numberDeployment.serviceNumberDeployment,
  )
  if (!commonConfVersion) {
    return serviceConfig
  }
  const commonConfig = await getServiceConfig(
    COMMON_SERVICE,
    env,
    commonConfVersion,
    numberDeployment.commonNumberDeployment,
  )

  return {
    ...(safeLoadAll(commonConfig)[0] || {}),
    ...(safeLoadAll(serviceConfig)[0] || {}),
  }
}

module.exports = {
  getConfigs,
  getLocalConfig,
}
