'use strict'

// const request = require('request')
// const yaml = require('js-yaml')
// const postConfigGuild = 'https://github.com/gogojungle/configs.gogojungle.co.jp/tree/staging/packages/configs-v2#2-create--modify'
const configv2 = require('./configv2')
const configv3 = require('./configv3')
const fs = require('fs')
const jsYaml = require('js-yaml')
const path = require('path')
const COMMON_SERVICE = 'gogo.common'

/**
 * Get configs
 * @return {Object} Configs of service
 */
 async function getConfigs(pkName = '', pathService = '') {
   if(pkName && !pathService) {
     throw new Error('invalid params, add path service efs')
   }
  const configVersionsPath = (pkName && pathService) ? path.join(pathService, '.awsConfVer.yaml') : path.join(process.cwd(), '.awsConfVer.yaml')
  const configVersions = jsYaml.load(fs.readFileSync(configVersionsPath))
  const { serviceConfVersion = null, commonConfVersion = null } = configVersions
  const serviceName = pkName ? pkName : process.env.npm_package_name
  const env = process.env.ENV
  // const { npm_package_name: serviceName , ENV: env } = process.env
  const serviceNumberDeployment = _getNumberDeployment(configVersions, 'serviceNumberDeployment', env)
  if (!serviceNumberDeployment) {
      throw new Error(`serviceNumberDeployment is missing.
      Get from https://ap-northeast-1.console.aws.amazon.com/systems-manager/appconfig/applications/m09epjn/environments/tuyudl6?region=ap-northeast-1. Deployment number ..`)
  }
  const commonNumberDeployment = _getNumberDeployment(configVersions, 'commonNumberDeployment', env)
  if (!commonNumberDeployment && commonConfVersion) {
    throw new Error(`serviceNumberDeployment is missing.
      Get from https://ap-northeast-1.console.aws.amazon.com/systems-manager/appconfig/applications/m09epjn/environments/tuyudl6?region=ap-northeast-1. Deployment number ..`)
  }
  const numberDeployment = {serviceNumberDeployment: serviceNumberDeployment, commonNumberDeployment: commonNumberDeployment}
  const prefixConfigProperty = pkName ? _genPrefixConfigProperty(pkName) : ''
  if (['staging', 'production'].includes(env)) {
    const configs = await configv3.getConfigs(
      serviceName,
      env,
      serviceConfVersion,
      commonConfVersion,
      numberDeployment
    )
    return pkName ? _genConfigServiceCommon(configs, pkName) : configs
  } else {
    const envLocalPath = path.join(pathService ? pathService : process.cwd(), '.env.yaml')
    if (fs.existsSync(envLocalPath)) {
      const existConfigLocal =  jsYaml.loadAll(fs.readFileSync(envLocalPath))[0] || {}
      if (
        existConfigLocal[`${prefixConfigProperty}SERVICE_NUMBER_DEPLOYMENT`] === numberDeployment.serviceNumberDeployment &&
        existConfigLocal[`${prefixConfigProperty}COMMON_NUMBER_DEPLOYMENT`] === numberDeployment.commonNumberDeployment
      ) {
        return existConfigLocal
      } else {
        fs.unlinkSync(envLocalPath)
        console.log(`Get env from AWS config and create new file env efs version: ${serviceConfVersion} and deployment: ${serviceNumberDeployment}`)
      }
    }
    const configs = await configv3.getLocalConfig(
      serviceName,
      env,
      serviceConfVersion,
      commonConfVersion,
      numberDeployment,
    )
    const dataConfigs = pkName ? _genConfigServiceCommon(configs, pkName) : configs
    fs.writeFileSync(envLocalPath, jsYaml.dump(dataConfigs))
    console.log(`Create new env version ${serviceConfVersion} and deployment ${serviceNumberDeployment}`)
    return dataConfigs
  }
}

function _getNumberDeployment(configs, name, env) {
   if (configs[name] && configs[name][env]) {
     return configs[name][env] || 0
   }
}
function _genConfigServiceCommon(configs, pkName) {
  const prefix = _genPrefixConfigProperty(pkName)
  const dataConfigs = {}
  Object.keys(configs).forEach(key => {
    if (configs.hasOwnProperty(key)) {
      dataConfigs[`${prefix}${key}`] = configs[key]
    }
  })
  return dataConfigs
}
function _genPrefixConfigProperty(pkName) {
  return pkName.toUpperCase().replace(/\./g, '_') + '_'
}
/**
 * get database configuration
 * @param {Array} dbNames database names
 * @param {Boolean} autoSet if true -> auto set the result into env variable
 */
async function getDbConfigs(dbNames = [], autoSet = false, env = process.env.ENV) {
  // staging or production
  if(['staging', 'production'].includes(env)){
    return configv2.getDbConfigsv2(dbNames, autoSet)
  }
  //local
  const pathDBEnvLocal = path.join(process.cwd(), '/.db.yaml')
  const existEnv = fs.existsSync(pathDBEnvLocal)
  if (!existEnv) {
    const configs = await configv2.getDbConfigsv2(dbNames, autoSet)
    fs.writeFileSync(pathDBEnvLocal, jsYaml.safeDump(configs))
    return configs
  }
  const dbConfigLocal = jsYaml.safeLoad(fs.readFileSync(pathDBEnvLocal), { json: true  })
  setEnvVariables(_formatDbConfigs(dbConfigLocal))
  return dbConfigLocal
  // let env = process.env.ENV
  // if (!['staging', 'production'].includes(env)) {
  //   env = 'local'
  // }
  // let dbs = await getConfigs('obj', 'db', env)
  // if (!Array.isArray(dbs)) {
  //   throw new Error(`Empty config for <${dbNames}>`)
  // }
  //
  // let processed = dbs.reduce((acc, db) => {
  //   let dbname = Object.keys(db)[0],
  //     dbInfo = db[dbname]
  //
  //   dbname.split(',').forEach(name => {
  //     if(!('database' in dbInfo)) {
  //       acc[name] = Object.assign({database: name}, dbInfo)
  //     } else {
  //       acc[name] = dbInfo
  //     }
  //   })
  //   return acc
  // }, {})
  //
  // let result = dbNames.reduce((acc, dbName) => {
  //   if (dbName in processed) {
  //     acc[dbName] = processed[dbName]
  //   } else {
  //     // Strickly prevent deficiency
  //     throw new Error(
  //       `Could not find database config for \`${dbName}\`
  //       please correct your parameters
  //       `
  //     )
  //
  //   }
  //   return acc
  // }, {})
  //
  // if (autoSet) {
  //   setEnvVariables(
  //     _formatDbConfigs(result)
  //   )
  // }
  //
  // return result
}

/**
 * get database configuration
 * @param {Array} dbNames database names
 * @param {Boolean} autoSet if true -> auto set the result into env variable
 */
async function getCommonConfigs(names = [], autoSet = false) {
  if (process.env.IS_AWS_CONFIG == 'true') {
    return configv2.getCommonConfigsv2(names, autoSet)
  }
  return []
}

function _formatDbConfigs(dbConfigs) {
  return Object.keys(dbConfigs).reduce((acc, name) => {
    const config = dbConfigs[name]
    Object.keys(config).forEach(k => {
      acc[`${name}_${k}`] = config[k]
    })
    return acc
  }, {})
}

/**
 * Set the object to environment variables
 * @param {Object} configs
 */
function setEnvVariables(configs) {
  Object.keys(configs).forEach(key => {
    if (configs.hasOwnProperty(key)) {
      process.env[key] = configs[key]
    }
  })
}

module.exports = {
  getConfigs,
  getDbConfigs,
  setEnvVariables,
  getCommonConfigs,
}

