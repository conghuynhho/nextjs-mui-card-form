'use strict'
const AWS = require('aws-sdk')
const {safeLoadAll} = require('js-yaml')
const DEFAULT_LOCAL_DB_HOST = 'host.docker.internal'

/**
 * Get configs
 * @param {Boolean} isCommon Get common config or not
 * @return {Object} Config of service
 */
async function getConfigsv2(isCommon = false) {
  const {
    npm_package_name: service,
    ENV: env,
    npm_package_config_version: version = 1,
  } = process.env
  const ClientConfigurationVersion = Number(version) + 1 < 2 ? '2' : `${Number(version) + 1}`
  const serviceParams = {
    Application: service,
    ClientId: `${service}-${env}`,
    Configuration: `${service}.${env}`,
    Environment: env,
    ClientConfigurationVersion,
  }

  const awsAppConfig = new AWS.AppConfig()
  let serviceConfig = await awsAppConfig.getConfiguration(serviceParams).promise()
  serviceConfig = safeLoadAll(serviceConfig.Content.toString() || '')[0] || {}
  if (!isCommon) {
    return serviceConfig
  }

  const commonService = 'gogo.common'
  const commonParams = {
    Application: commonService,
    ClientId: `${commonService}-${env}`,
    Configuration: `${commonService}.${env}`,
    Environment: env,
    ClientConfigurationVersion,
  }
  let commonConfig = await awsAppConfig.getConfiguration(commonParams).promise()
  commonConfig = safeLoadAll(commonConfig.Content.toString() || '')[0] || {}

  return Object.assign(serviceConfig, commonConfig)
}

/**
 * get database configuration
 * @param {Array} dbNames database names
 * @param {Boolean} autoSet if true -> auto set the result into env variable
 */
async function getDbConfigsv2(dbNames = [], autoSet = false) {
  if (!dbNames.length) {
    return []
  }
  const ssm = new AWS.SSM()

  const paramsNames = _preProcessDBNames(dbNames)
  const listParams = _chunkArr(paramsNames)
  const paramsReq = []
  for (const names of listParams) {
    paramsReq.push({
      Names: names,
      WithDecryption: true
    })
  }

  const listRequest = paramsReq.map(list => ssm.getParameters(list).promise())
  const listParamsStore = await Promise.all(listRequest)
  // get host reader
  const lastEl = listParamsStore[listParamsStore.length - 1].Parameters
  let dbReader = lastEl.find((x, i) => {
    if (x.Name.endsWith('db/DB_HOST_READER')) {
      lastEl.splice(i, 1)
      return true
    }
  })
  const result = {}
  const isLocal = !['staging', 'production'].includes(process.env.ENV)

  for (const paramsStore of listParamsStore) {
    const data = (paramsStore || {}).Parameters || []
    for (const item of data) {
      let name = item.Name.split('/')
      name = name[name.length - 1]
      name = name.split('_DB_')
      const keyName = name[0].toLowerCase()
      const keyName2 = name[1].toLowerCase()
      if (!result[keyName]) {
        result[keyName] = {}
        result[`${keyName}_reader`] = {}
        result[keyName].connectionLimit = process.env.ENV === 'production' ? 10 : 5
      }
      result[keyName][keyName2] = item.Value
      result[`${keyName}_reader`][keyName2] = keyName2 == 'host' ? dbReader.Value : item.Value
      if (isLocal && keyName2 == 'host' && keyName != 'auth') {
        result[keyName][keyName2] = DEFAULT_LOCAL_DB_HOST
        result[`${keyName}_reader`][keyName2] = DEFAULT_LOCAL_DB_HOST
      }
    }
  }

  if (autoSet) {
    setEnvVariables(
      _formatDbConfigs(result)
    )
  }
  return result
}

/**
 * get common configuration
 * @param {Array} names common configs names
 * @param {Boolean} autoSet if true -> auto set the result into env variable
 */
async function getCommonConfigsv2(names = [], autoSet = false) {
  if (!names.length) {
    return []
  }
  const ssm = new AWS.SSM()

  const paramsNames = _preProcessCommonNames(names)
  const listParams = _chunkArr(paramsNames)
  const paramsReq = []
  for (const names of listParams) {
    paramsReq.push({
      Names: names,
      WithDecryption: true
    })
  }
  const listRequest = paramsReq.map(list => ssm.getParameters(list).promise())
  const listParamsStore = await Promise.all(listRequest)
  const result = {}

  for (const paramsStore of listParamsStore) {
    const data = (paramsStore || {}).Parameters || []
    for (const item of data) {
      let name = item.Name.split('/')
      name = name[name.length - 1]
      const keyName = name
      result[keyName] = item.Value
    }
  }

  if (autoSet) {
    setCommonEnvVariables(result)
  }
  return result
}

function _preProcessCommonNames(names = []) {
  if (!names.length) {
    return []
  }
  const env = process.env.ENV
  return names.map(cf => `/${env}/common/${cf.toUpperCase()}`)
}

function _preProcessDBNames(dbNames = []) {
  if (!dbNames.length) {
    return []
  }
  let env = process.env.ENV
  if(!['staging', 'production'].includes(process.env.ENV)) {
    env = 'development'
  }
  const res = []
  for (const db of dbNames) {
    res.push(`/${env}/db/${db.toUpperCase()}_DB_HOST`)
    res.push(`/${env}/db/${db.toUpperCase()}_DB_DATABASE`)
    res.push(`/${env}/db/${db.toUpperCase()}_DB_USERNAME`)
    res.push(`/${env}/db/${db.toUpperCase()}_DB_PASSWORD`)
  }
  // add host reader
  res.push(`/${env}/db/DB_HOST_READER`)
  return res
}

function _formatDbConfigs(dbConfigs) {
  return Object.keys(dbConfigs).reduce((acc, name) => {
    const config = dbConfigs[name]
    Object.keys(config).forEach(k => {
      acc[`${name}_${k}`] = config[k]
    })
    return acc
  }, {})
}

function _chunkArr(arr) {
  let i, j
  const tempArr = []
  const chunkSize = 10
  for (i = 0, j = arr.length; i < j; i += chunkSize) {
    tempArr.push(arr.slice(i, i + chunkSize))
  }
  return tempArr
}

/**
 * Set the object to environment variables
 * @param {Object} configs
 */
function setEnvVariables(configs) {
  Object.keys(configs).forEach(key => {
    if (configs.hasOwnProperty(key)) {
      process.env[key] = configs[key]
    }
  })
}

/**
 * Set the object to environment variables
 * @param {Object} configs
 */
function setCommonEnvVariables(configs) {
  for (const cfg in configs) {
    if (configs[cfg]) {
      process.env[cfg] = configs[cfg]
    }
  }
}


module.exports = {
  getConfigsv2,
  getDbConfigsv2,
  getCommonConfigsv2,
}
