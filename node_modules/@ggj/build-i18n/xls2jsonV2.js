let fn = async (config) => {
  const XlsxPopulate = require('xlsx-populate')
  const fs = require('fs')
  const path = require('path')

  const i18nPath = config.I18N_PATH
  const rootPath = config.EXCEL_PATH

  const langSupport = (config.LANG_SUPPORT || []).split(',') // ['ja', 'en', 'th', 'ch', 'tw', 'vi']
  const reference = { row: config.REF_ROW || 2, cell: config.REF_CELL || 10 } // reference cell "J2" in each sheet

  if (fs.existsSync(i18nPath)) {
    console.log('Start remove old files')
    process.stdout.write('Removing ...')
    let i18nDir = fs.readdirSync(i18nPath)
    for (let i in i18nDir) {
      if (fs.lstatSync(i18nPath + '/' + i18nDir[i]).isDirectory()) {
        let i18nChildDir = fs.readdirSync(i18nPath + '/' + i18nDir[i])
        for (let j in i18nChildDir) {
          process.stdout.write('.')
          fs.unlinkSync(i18nPath + '/' + i18nDir[i] + '/' + i18nChildDir[j])
        }
      }
    }
  }

  console.log('\nStart build common json')
  await xls2Json('common.xlsx')

  console.log('Start build others json')
  fs.readdir(rootPath, (err, fileNames) => {
    if (err) throw err
    for (let i in fileNames) {
      let tmpPath = fileNames[i]
      // don't handle common.xlsx file and tmp excel
      if (tmpPath.indexOf('$') !== -1 || tmpPath.indexOf('common') != -1) {
        continue
      }
      if (path.extname(tmpPath) == '.xls' || path.extname(tmpPath) == '.xlsx') {
        xls2Json(tmpPath)
      }
    }
  })

  async function xls2Json(_path) {
    return new Promise((resolve, reject) => {
      try {
        let fileLocation = rootPath + '/' + _path,
          localeName = _path.substring(0, _path.lastIndexOf('.'))

        if (!fs.existsSync(fileLocation)) {
          throw 'File not found: ' + fileLocation
        }

        XlsxPopulate.fromFileAsync(fileLocation).then(async book => {
          let sheetName = ''
          try {
            let lastSheet = book.sheets().length,
              refObj = {},
              localeObj = {}
            // jsonDir = i18nPath + '/' + localeName

            // if (!fs.existsSync(jsonDir)) {
            //   fs.mkdirSync(jsonDir)
            // }

            // Build from sheet 2, sheet 1 is map-index sheet
            for (let i = 1; i < lastSheet; i++) {
              let _row = 2,
                curSheet = book.sheet(i),
                curName = curSheet.name(),
                idx = curSheet
                  .row(_row)
                  .cell(1)
                  .value(),
                refs = curSheet
                  .row(reference.row || 2)
                  .cell(reference.cell || 10)
                  .value()
              sheetName = curName
              // Reference in common file
              if (refs != undefined) {
                refObj[curName] = refs.split(',')
              }

              // Init language object
              localeObj[curName] = {}
              for (let i in langSupport) {
                let lang = langSupport[i]
                localeObj[curName][lang] = {}
              }

              // Build until get "index" undefined
              while (idx != undefined) {
                // Handle dupplicate index
                for (let i in langSupport) {
                  let lang = langSupport[i]
                  if (localeObj[curName][lang][idx]) {
                    throw 'Exists index ' +
                    idx +
                    '\nAt file ' +
                    fileLocation +
                    '\nSheet :' +
                    curName
                  }
                }

                // Get text and add to language object
                for (let i = 1; i < langSupport.length + 1; i++) {
                  let text = curSheet
                      .row(_row)
                      .cell(i + 1)
                      .value(),
                    lang = langSupport[i - 1]

                  // Fallback to 'ja' if text null or undefined
                  if (!text) {
                    text = curSheet
                      .row(_row)
                      .cell(2)
                      .value()
                  }

                  // Add to language object
                  localeObj[curName][lang][idx] = text.toString().trim()
                }

                // Increase row & index to loop
                _row++
                idx = curSheet
                  .row(_row)
                  .cell(1)
                  .value()
              }
            }

            // Add reference text object
            for (let i in localeObj) {
              if (refObj[i]) {
                let refs = refObj[i]
                for (let j in refs) {
                  let key = refs[j]
                  for (let lang in localeObj[i]) {
                    let commonFile = i18nPath + '/' + lang + '/common@' + key +
                        '.json',
                      obj = fs.readFileSync(commonFile, 'utf8')
                    obj = JSON.parse(obj)
                    Object.assign(localeObj[i][lang], { [key]: obj })
                  }
                }
              }

              // Write json file
              Object.keys(localeObj[i]).forEach(lang => {
                const [filePath, fileName] = [i18nPath + '/' + lang,
                  localeName + '@' + i + '.json']
                if (!fs.existsSync(filePath)) fs.mkdirSync(filePath)
                const _p = path.resolve(filePath, fileName)
                let writeFS = fs.createWriteStream(_p)
                writeFS.write(
                  JSON.stringify(localeObj[i][lang]),
                  err => { if (!err) writeFS.end() },
                )
                console.log('build success file: ',fileName)
              })
            }

            // add default file, with empty content
            langSupport.forEach(lang => {
              const [filePath, fileName] = [i18nPath + '/' + lang,
                'common@default' + '.json']
              if (!fs.existsSync(filePath)) fs.mkdirSync(filePath)
              let writeFS = fs.createWriteStream(
                path.resolve(filePath, fileName))
              writeFS.write('{}', err => { if (!err) writeFS.end() })
            })
            console.log('build file JSON success by file', _path )
            resolve()
          }
          catch (error) {
            console.log(`error sheetName: ${sheetName}, error: ${error}` )
            reject(`Build lang error, please fix it and rebuild!`)
            process.exit(1)
          }
        })
      } catch (e) {
        reject(e)
        console.log(e)
        process.exit(1)
      }
    })
  }
  console.log('DONE !!!')
}

module.exports = fn
