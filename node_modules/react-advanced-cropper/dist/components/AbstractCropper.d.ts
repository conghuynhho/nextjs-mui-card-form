import React, { CSSProperties } from 'react';
import { DrawOptions, BoundaryStretchAlgorithm, DefaultSettings, BoundarySizeAlgorithm, CoreSettings, CropperImage, CropperState, CropperTransitions, ModifierSettings, AbstractCropperCallbacks, AbstractCropperParameters } from 'advanced-cropper';
import { CropperBackgroundWrapperComponent, CropperWrapperComponent, StencilComponent, CropperBackgroundComponent, ArbitraryProps, StencilConstraints, ExtendedSettings, CustomCropperRef } from '../types';
import { CropperStateHook, CropperStateSettings, CropperStateSettingsProp } from '../hooks/useCropperState';
export declare type AbstractCropperSettingsProp<Settings extends CropperStateSettings> = CropperStateSettingsProp<Settings>;
export declare type AbstractCropperSettings = DefaultSettings & CoreSettings & ModifierSettings;
export interface AbstractCropperRef<Settings extends AbstractCropperSettings = AbstractCropperSettings> {
    reset: () => void;
    refresh: () => void;
    setCoordinates: CropperStateHook['setCoordinates'];
    setState: CropperStateHook['setState'];
    setImage: (image: CropperImage) => void;
    flipImage: CropperStateHook['flipImage'];
    zoomImage: CropperStateHook['zoomImage'];
    rotateImage: CropperStateHook['rotateImage'];
    reconcileState: CropperStateHook['reconcileState'];
    moveImage: CropperStateHook['moveImage'];
    moveCoordinates: CropperStateHook['moveCoordinates'];
    moveCoordinatesEnd: CropperStateHook['moveCoordinatesEnd'];
    resizeCoordinates: CropperStateHook['resizeCoordinates'];
    resizeCoordinatesEnd: CropperStateHook['resizeCoordinatesEnd'];
    transformImage: CropperStateHook['transformImage'];
    transformImageEnd: CropperStateHook['transformImageEnd'];
    getCoordinates: CropperStateHook['getCoordinates'];
    getVisibleArea: CropperStateHook['getVisibleArea'];
    getTransforms: CropperStateHook['getTransforms'];
    getStencilCoordinates: CropperStateHook['getStencilCoordinates'];
    getDefaultState: () => CropperState | null;
    getCanvas: (options?: DrawOptions) => HTMLCanvasElement | null;
    getSettings: () => Settings;
    getImage: () => CropperImage | null;
    getState: () => CropperState | null;
    getTransitions: () => CropperTransitions;
}
export interface AbstractCropperProps<Settings extends AbstractCropperSettings> extends AbstractCropperParameters<Settings>, AbstractCropperCallbacks<AbstractCropperRef<Settings>> {
    src?: string | null;
    backgroundComponent?: CropperBackgroundComponent;
    backgroundProps?: ArbitraryProps;
    backgroundWrapperComponent?: CropperBackgroundWrapperComponent;
    backgroundWrapperProps?: ArbitraryProps;
    wrapperComponent?: CropperWrapperComponent;
    wrapperProps?: ArbitraryProps;
    stencilComponent?: StencilComponent;
    stencilProps?: ArbitraryProps;
    stencilConstraints?: StencilConstraints<AbstractCropperSettingsProp<Settings>>;
    className?: string;
    imageClassName?: string;
    boundaryClassName?: string;
    backgroundClassName?: string;
    checkOrientation?: boolean;
    canvas?: boolean;
    crossOrigin?: 'anonymous' | 'use-credentials';
    boundaryStretchAlgorithm?: BoundaryStretchAlgorithm;
    boundarySizeAlgorithm?: BoundarySizeAlgorithm;
    style?: CSSProperties;
    onReady?: (cropper: AbstractCropperRef<Settings>) => void;
    onError?: (cropper: AbstractCropperRef<Settings>) => void;
    unloadTime?: number;
    settings: CropperStateSettingsProp<Settings>;
    autoReconcileState?: boolean;
}
export declare type AbstractCropperIntrinsicProps<Settings extends AbstractCropperSettings> = Omit<AbstractCropperProps<Settings>, 'settings'>;
export declare const AbstractCropper: <Extension extends object = {}>(props: AbstractCropperProps<ExtendedSettings<Extension>> & React.RefAttributes<CustomCropperRef<Extension>>) => React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;
