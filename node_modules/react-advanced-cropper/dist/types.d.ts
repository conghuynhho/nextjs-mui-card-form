import { ComponentType, CSSProperties, ReactNode, Ref } from 'react';
import { CropperImage, CropperTransitions, CropperState, DefaultSettings, ModifierSettings, CoreSettings, RawAspectRatio, AbstractCropperMethodOptions } from 'advanced-cropper';
import { AbstractCropperIntrinsicProps, AbstractCropperRef, AbstractCropperSettings } from './components/AbstractCropper';
import { CropperRef } from './components/croppers/Cropper';
export declare type StencilComponent = any;
export declare type CropperWrapperComponent = ComponentType<{
    cropper: any;
    loading: boolean;
    loaded: boolean;
    className?: string;
    style?: CSSProperties;
}>;
export interface CropperBackgroundProps {
    className?: string;
    ref: Ref<HTMLImageElement | HTMLCanvasElement>;
    image: CropperImage | null;
    state: CropperState | null;
    transitions?: CropperTransitions;
    crossOrigin?: 'anonymous' | 'use-credentials' | boolean;
}
export declare type CropperBackgroundComponent = any;
export declare type CropperBackgroundWrapperComponent = ComponentType<{
    cropper: any;
    touchMove?: boolean;
    mouseMove?: boolean;
    touchScale?: boolean;
    touchRotate?: boolean;
    wheelScale?: boolean | {
        ratio: number;
    };
    children?: ReactNode;
    className?: string;
    style?: CSSProperties;
}>;
export interface TransitionsSettings {
    timingFunction?: string;
    duration?: number;
}
export declare type StencilOptions = Record<string, unknown>;
export declare type StencilConstraints<Settings extends {}> = (settings: Settings, stencilOptions: StencilOptions) => Partial<Settings>;
export interface ScaleImageSettings {
    touch?: boolean;
    wheel?: boolean | {
        ratio?: number;
    };
    adjustStencil?: boolean;
}
export interface RotateImageSettings {
    touch?: boolean;
}
export interface MoveImageSettings {
    touch?: boolean;
    mouse?: boolean;
}
export declare type CustomCropperProps<Extension extends SettingsExtension> = AbstractCropperIntrinsicProps<ExtendedSettings<Extension>> & Partial<Pick<ExtendedSettings<Extension>, keyof CustomCropperSettings>> & Omit<ExtendedSettings<Extension>, keyof CustomCropperSettings>;
export declare type CustomCropperRef<Extension extends SettingsExtension> = AbstractCropperRef<ExtendedSettings<Extension>>;
export declare type CustomCropperSettings = AbstractCropperSettings;
export declare type CropperMethodOptions = AbstractCropperMethodOptions;
export interface StencilRef {
    aspectRatio: RawAspectRatio | (() => RawAspectRatio);
}
export interface StencilProps<Cropper = CropperRef> {
    cropper: Cropper;
    image: CropperImage | null;
}
export declare type ArbitraryProps = Record<string, any>;
export declare type ExtendedSettings<Extension extends {}> = Extension & DefaultSettings & CoreSettings & ModifierSettings;
export declare type SettingsExtension = object;
