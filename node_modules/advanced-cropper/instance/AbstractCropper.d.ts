import { Boundary, CoordinatesTransform, CoreSettings, CropperImage, CropperInteractions, CropperState, CropperTransitionsSettings, DefaultTransforms, ImageTransform, ModifierSettings, MoveDirections, Nullable, PostprocessAction, PostprocessFunction, Priority, ResizeDirections, Rotate, Scale, VisibleArea } from "../types/index";
import { CreateStateAlgorithm, MoveAlgorithm, ReconcileStateAlgorithm, ResizeAlgorithm, SetBoundaryAlgorithm, SetCoordinatesAlgorithm, SetVisibleAreaAlgorithm, TransformImageAlgorithm } from "../state/index";
interface TransitionOptions {
    transitions?: boolean;
}
interface InteractionOptions {
    interaction?: boolean;
}
interface ImmediatelyOptions {
    immediately?: boolean;
}
interface PostprocessOptions {
    postprocess?: boolean;
}
interface NormalizeOptions {
    normalize?: boolean;
}
type AbstractCropperPostprocess = 'interactionEnd' | 'createState' | 'reconcileState' | 'transformImage' | 'transformImageEnd' | 'setCoordinates' | 'setVisibleArea' | 'setBoundary' | 'moveCoordinates' | 'moveCoordinatesEnd' | 'resizeCoordinates' | 'resizeCoordinatesEnd';
interface AbstractCropperData {
    state: CropperState | null;
    transitions: boolean;
    interactions: CropperInteractions;
}
interface AbstractCropperMethodOptions {
    transitions?: boolean;
}
type StateModifier = (state: CropperState | null, settings: CoreSettings) => CropperState | null;
type AbstractCropperSettings = CoreSettings & ModifierSettings;
type AbstractCropperProps<Settings extends AbstractCropperSettings, Instance> = AbstractCropperParameters<Settings> & AbstractCropperCallbacks<Instance> & {
    settings: Settings;
};
type AbstractCropperCallback<Instance> = (instance: NonNullable<Instance>) => void;
interface AbstractCropperCallbacks<Instance = unknown> {
    getInstance?: () => Nullable<Instance>;
    onTransitionsStart?: AbstractCropperCallback<Instance>;
    onTransitionsEnd?: AbstractCropperCallback<Instance>;
    onChange?: AbstractCropperCallback<Instance>;
    onResizeEnd?: AbstractCropperCallback<Instance>;
    onMoveEnd?: AbstractCropperCallback<Instance>;
    onMove?: AbstractCropperCallback<Instance>;
    onResize?: AbstractCropperCallback<Instance>;
    onTransformImage?: AbstractCropperCallback<Instance>;
    onTransformImageEnd?: AbstractCropperCallback<Instance>;
    onInteractionStart?: AbstractCropperCallback<Instance>;
    onInteractionEnd?: AbstractCropperCallback<Instance>;
}
interface AbstractCropperParameters<Settings extends CoreSettings> {
    transitions?: CropperTransitionsSettings | boolean;
    postProcess?: PostprocessFunction<Settings> | PostprocessFunction<Settings>[];
    setCoordinatesAlgorithm?: SetCoordinatesAlgorithm<Settings>;
    setVisibleAreaAlgorithm?: SetVisibleAreaAlgorithm<Settings>;
    setBoundaryAlgorithm?: SetBoundaryAlgorithm<Settings>;
    transformImageAlgorithm?: TransformImageAlgorithm<Settings>;
    moveCoordinatesAlgorithm?: MoveAlgorithm<Settings>;
    resizeCoordinatesAlgorithm?: ResizeAlgorithm<Settings>;
    createStateAlgorithm?: CreateStateAlgorithm<Settings>;
    reconcileStateAlgorithm?: ReconcileStateAlgorithm<Settings>;
    defaultTransforms?: DefaultTransforms;
    priority?: Priority;
}
declare abstract class AbstractCropper<Settings extends AbstractCropperSettings, Instance = unknown> {
    protected abstract setData(data: AbstractCropperData): void;
    protected abstract getData(): AbstractCropperData;
    protected abstract getProps(): AbstractCropperProps<Settings, Instance>;
    getTransitions: () => any;
    getInteractions: () => CropperInteractions;
    hasInteractions: () => boolean;
    protected disableTransitions: {
        (): void;
        clear(): void;
    };
    protected applyPostProcess: (action: PostprocessAction, state: CropperState) => CropperState;
    protected updateState: (modifier: StateModifier | CropperState | null, options?: AbstractCropperMethodOptions, callbacks?: (AbstractCropperCallback<Instance> | undefined)[]) => void;
    protected setInteractions: (interactions: Partial<CropperInteractions>) => void;
    resetState: (boundary: Boundary, image: CropperImage) => void;
    clear: () => void;
    reconcileState: (options?: TransitionOptions) => void;
    transformImage: (transform: ImageTransform, options?: InteractionOptions & ImmediatelyOptions & NormalizeOptions & TransitionOptions) => void;
    transformImageEnd: (options?: ImmediatelyOptions & TransitionOptions) => void;
    zoomImage: (scale: Scale | number, options?: InteractionOptions & ImmediatelyOptions & NormalizeOptions & TransitionOptions) => void;
    moveImage: (left: number, top?: number | undefined, options?: InteractionOptions & ImmediatelyOptions & NormalizeOptions & TransitionOptions) => void;
    flipImage: (horizontal?: boolean | undefined, vertical?: boolean | undefined, options?: InteractionOptions & ImmediatelyOptions & NormalizeOptions & TransitionOptions) => void;
    rotateImage: (rotate: number | Rotate, options?: InteractionOptions & ImmediatelyOptions & NormalizeOptions & TransitionOptions) => void;
    reset: (boundary: Boundary, image: CropperImage) => void;
    setState: (modifier: CropperState | StateModifier | null, options?: TransitionOptions & ImmediatelyOptions & InteractionOptions & PostprocessOptions) => void;
    setCoordinates: (transforms: CoordinatesTransform | CoordinatesTransform[], options?: ImmediatelyOptions & TransitionOptions) => void;
    setVisibleArea: (visibleArea: VisibleArea, options?: ImmediatelyOptions & TransitionOptions) => void;
    setBoundary: (boundary: Boundary, options?: ImmediatelyOptions & TransitionOptions) => void;
    moveCoordinates: (directions: Partial<MoveDirections>, options?: InteractionOptions & ImmediatelyOptions & NormalizeOptions & TransitionOptions) => void;
    moveCoordinatesEnd: (options?: ImmediatelyOptions & TransitionOptions) => void;
    resizeCoordinates: (directions: Partial<ResizeDirections>, parameters?: Record<string, unknown>, options?: InteractionOptions & ImmediatelyOptions & NormalizeOptions & TransitionOptions) => void;
    resizeCoordinatesEnd: (options?: ImmediatelyOptions & TransitionOptions) => void;
    getStencilCoordinates: () => {
        left: number;
        top: number;
        width: number;
        height: number;
    };
    getCoordinates: (options?: {
        round?: boolean;
    }) => import("../types/index").Coordinates | null;
    getVisibleArea: () => {} | null;
    getSettings: () => Settings;
    getState: () => CropperState | null;
    getTransforms: () => import("../types/index").Transforms;
    createDefaultState: (boundary: Boundary, image: CropperImage) => CropperState;
    isConsistent: () => boolean;
}
export { TransitionOptions, InteractionOptions, ImmediatelyOptions, PostprocessOptions, NormalizeOptions, AbstractCropperPostprocess, AbstractCropperData, AbstractCropperMethodOptions, AbstractCropperSettings, AbstractCropperProps, AbstractCropperCallback, AbstractCropperCallbacks, AbstractCropperParameters, AbstractCropper };
