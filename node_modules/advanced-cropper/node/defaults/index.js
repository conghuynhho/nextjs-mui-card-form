'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var index = require('../utils/index.js');
var utils = require('../service/utils.js');
var sizeRestrictions = require('../service/sizeRestrictions.js');
require('../types/index.js');
require('../state/setCoordinates.js');
var defaultPositionRestrictions = require('./defaultPositionRestrictions.js');
var defaultVisibleArea = require('./defaultVisibleArea.js');
var defaultSize = require('./defaultSize.js');
var defaultSizeRestrictions = require('./defaultSizeRestrictions.js');
var defaultPosition = require('./defaultPosition.js');
var defaultAreaPositionRestrictions = require('./defaultAreaPositionRestrictions.js');
var defaultAreaSizeRestrictions = require('./defaultAreaSizeRestrictions.js');
var defaultBoundary = require('./defaultBoundary.js');
var defaultStencilConstraints = require('./defaultStencilConstraints.js');

function withDefaultSizeRestrictions(sizeRestrictions$1) {
    return function (state, basicSettings) {
        var value = index.isFunction(sizeRestrictions$1) ? sizeRestrictions$1(state, basicSettings) : sizeRestrictions$1;
        return sizeRestrictions.mergeSizeRestrictions(defaultSizeRestrictions.pixelsRestrictions(state, basicSettings), value);
    };
}
function withDefaultPositionRestrictions(positionRestrictions) {
    return function (state, basicSettings) {
        var value = index.isFunction(positionRestrictions)
            ? positionRestrictions(state, basicSettings)
            : positionRestrictions;
        return utils.mergePositionRestrictions(defaultPositionRestrictions.defaultPositionRestrictions(state, basicSettings), value);
    };
}
function withDefaultAreaPositionRestrictions(areaPositionRestrictions) {
    return function (state, basicSettings) {
        var value = index.isFunction(areaPositionRestrictions)
            ? areaPositionRestrictions(state, basicSettings)
            : areaPositionRestrictions;
        return utils.mergePositionRestrictions(defaultAreaPositionRestrictions.defaultAreaPositionRestrictions(state, basicSettings), value);
    };
}
function withDefaultAreaSizeRestrictions(areaSizeRestrictions) {
    return function (state, basicSettings) {
        var value = index.isFunction(areaSizeRestrictions)
            ? areaSizeRestrictions(state, basicSettings)
            : areaSizeRestrictions;
        return sizeRestrictions.mergeSizeRestrictions(defaultAreaSizeRestrictions.defaultAreaSizeRestrictions(state, basicSettings), value);
    };
}
function createDefaultSettings(params) {
    return tslib.__assign(tslib.__assign({}, params), { sizeRestrictions: function (state, basicSettings) {
            var restrictions;
            if (params.sizeRestrictions) {
                restrictions = index.isFunction(params.sizeRestrictions)
                    ? params.sizeRestrictions(state, basicSettings)
                    : params.sizeRestrictions;
            }
            else {
                restrictions = defaultSizeRestrictions.pixelsRestrictions(state, basicSettings);
            }
            return restrictions;
        }, areaPositionRestrictions: function (state, basicSettings) {
            if (params.areaPositionRestrictions) {
                return index.isFunction(params.areaPositionRestrictions)
                    ? params.areaPositionRestrictions(state, basicSettings)
                    : params.areaPositionRestrictions;
            }
            else {
                return defaultAreaPositionRestrictions.defaultAreaPositionRestrictions(state, basicSettings);
            }
        }, areaSizeRestrictions: function (state, basicSettings) {
            if (params.areaSizeRestrictions) {
                return index.isFunction(params.areaSizeRestrictions)
                    ? params.areaSizeRestrictions(state, basicSettings)
                    : params.areaSizeRestrictions;
            }
            else {
                return defaultAreaSizeRestrictions.defaultAreaSizeRestrictions(state, basicSettings);
            }
        }, positionRestrictions: function (state, basicSettings) {
            if (params.positionRestrictions) {
                return index.isFunction(params.positionRestrictions)
                    ? params.positionRestrictions(state, basicSettings)
                    : params.positionRestrictions;
            }
            else {
                return defaultPositionRestrictions.defaultPositionRestrictions(state, basicSettings);
            }
        }, defaultCoordinates: function (state, basicSettings) {
            if (params.defaultCoordinates) {
                return index.isFunction(params.defaultCoordinates)
                    ? params.defaultCoordinates(state, basicSettings)
                    : params.defaultCoordinates;
            }
            else {
                var defaultSizeAlgorithm = params.defaultSize;
                if (!defaultSizeAlgorithm) {
                    defaultSizeAlgorithm = defaultSize.defaultSize;
                }
                var size = index.isFunction(defaultSizeAlgorithm)
                    ? defaultSizeAlgorithm(state, basicSettings)
                    : defaultSizeAlgorithm;
                var defaultPositionAlgorithm_1 = params.defaultPosition || defaultPosition.defaultPosition;
                return [
                    size,
                    function (state) { return (tslib.__assign({}, (index.isFunction(defaultPositionAlgorithm_1)
                        ? defaultPositionAlgorithm_1(state, basicSettings)
                        : defaultPositionAlgorithm_1))); },
                ];
            }
        }, defaultVisibleArea: function (state, basicSettings) {
            if (params.defaultVisibleArea) {
                return index.isFunction(params.defaultVisibleArea)
                    ? params.defaultVisibleArea(state, basicSettings)
                    : params.defaultVisibleArea;
            }
            else {
                return defaultVisibleArea.defaultVisibleArea(state, basicSettings);
            }
        }, aspectRatio: function (state, basicSettings) {
            return utils.createAspectRatio(index.isFunction(params.aspectRatio) ? params.aspectRatio(state, basicSettings) : params.aspectRatio);
        } });
}

exports.defaultPositionRestrictions = defaultPositionRestrictions.defaultPositionRestrictions;
exports.defaultVisibleArea = defaultVisibleArea.defaultVisibleArea;
exports.defaultSize = defaultSize.defaultSize;
exports.pixelsRestrictions = defaultSizeRestrictions.pixelsRestrictions;
exports.retrieveSizeRestrictions = defaultSizeRestrictions.retrieveSizeRestrictions;
exports.defaultPosition = defaultPosition.defaultPosition;
exports.defaultAreaPositionRestrictions = defaultAreaPositionRestrictions.defaultAreaPositionRestrictions;
exports.defaultAreaSizeRestrictions = defaultAreaSizeRestrictions.defaultAreaSizeRestrictions;
exports.fillBoundary = defaultBoundary.fillBoundary;
exports.fitBoundary = defaultBoundary.fitBoundary;
exports.defaultStencilConstraints = defaultStencilConstraints.defaultStencilConstraints;
exports.createDefaultSettings = createDefaultSettings;
exports.withDefaultAreaPositionRestrictions = withDefaultAreaPositionRestrictions;
exports.withDefaultAreaSizeRestrictions = withDefaultAreaSizeRestrictions;
exports.withDefaultPositionRestrictions = withDefaultPositionRestrictions;
exports.withDefaultSizeRestrictions = withDefaultSizeRestrictions;
